core::ptr::drop_in_place<alloc::vec::Vec<i32>>:
        sub     rsp, 24
        mov     qword ptr [rsp], rdi
        mov     rax, qword ptr [rip + <alloc::vec::Vec<T,A> as core::ops::drop::Drop>::drop@GOTPCREL]
        call    rax
        jmp     .LBB0_3
.LBB0_1:
        mov     rdi, qword ptr [rsp]
        mov     rax, qword ptr [rip + core::ptr::drop_in_place<alloc::raw_vec::RawVec<i32>>@GOTPCREL]
        call    rax
        jmp     .LBB0_5
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rsp + 8], rcx
        mov     dword ptr [rsp + 16], eax
        jmp     .LBB0_1
.LBB0_3:
        mov     rdi, qword ptr [rsp]
        call    qword ptr [rip + core::ptr::drop_in_place<alloc::raw_vec::RawVec<i32>>@GOTPCREL]
        add     rsp, 24
        ret
        mov     rax, qword ptr [rip + core::panicking::panic_cannot_unwind@GOTPCREL]
        call    rax
        ud2
.LBB0_5:
        mov     rdi, qword ptr [rsp + 8]
        call    _Unwind_Resume@PLT
        ud2

core::ptr::drop_in_place<alloc::raw_vec::RawVec<i32>>:
        push    rax
        call    qword ptr [rip + <alloc::raw_vec::RawVec<T,A> as core::ops::drop::Drop>::drop@GOTPCREL]
        pop     rax
        ret

core::ptr::drop_in_place<[alloc::vec::Vec<i32>]>:
        sub     rsp, 40
        mov     qword ptr [rsp], rdi
        mov     qword ptr [rsp + 8], rsi
        mov     qword ptr [rsp + 16], 0
.LBB2_1:
        mov     rax, qword ptr [rsp + 8]
        cmp     qword ptr [rsp + 16], rax
        je      .LBB2_3
        mov     rcx, qword ptr [rsp]
        mov     rax, qword ptr [rsp + 16]
        lea     rdx, [rax + 2*rax]
        lea     rdi, [rcx + 8*rdx]
        inc     rax
        mov     qword ptr [rsp + 16], rax
        mov     rax, qword ptr [rip + core::ptr::drop_in_place<alloc::vec::Vec<i32>>@GOTPCREL]
        call    rax
        jmp     .LBB2_1
.LBB2_3:
        add     rsp, 40
        ret
.LBB2_4:
        mov     rax, qword ptr [rsp + 8]
        cmp     qword ptr [rsp + 16], rax
        je      .LBB2_7
        jmp     .LBB2_6
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rsp + 24], rcx
        mov     dword ptr [rsp + 32], eax
        jmp     .LBB2_4
.LBB2_6:
        mov     rcx, qword ptr [rsp]
        mov     rax, qword ptr [rsp + 16]
        lea     rdx, [rax + 2*rax]
        lea     rdi, [rcx + 8*rdx]
        inc     rax
        mov     qword ptr [rsp + 16], rax
        mov     rax, qword ptr [rip + core::ptr::drop_in_place<alloc::vec::Vec<i32>>@GOTPCREL]
        call    rax
        jmp     .LBB2_4
.LBB2_7:
        mov     rdi, qword ptr [rsp + 24]
        call    _Unwind_Resume@PLT
        ud2
        mov     rax, qword ptr [rip + core::panicking::panic_cannot_unwind@GOTPCREL]
        call    rax
        ud2

core::ptr::drop_in_place<alloc::vec::Vec<alloc::vec::Vec<i32>>>:
        sub     rsp, 24
        mov     qword ptr [rsp], rdi
        mov     rax, qword ptr [rip + <alloc::vec::Vec<T,A> as core::ops::drop::Drop>::drop@GOTPCREL]
        call    rax
        jmp     .LBB3_3
.LBB3_1:
        mov     rdi, qword ptr [rsp]
        mov     rax, qword ptr [rip + core::ptr::drop_in_place<alloc::raw_vec::RawVec<alloc::vec::Vec<i32>>>@GOTPCREL]
        call    rax
        jmp     .LBB3_5
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rsp + 8], rcx
        mov     dword ptr [rsp + 16], eax
        jmp     .LBB3_1
.LBB3_3:
        mov     rdi, qword ptr [rsp]
        call    qword ptr [rip + core::ptr::drop_in_place<alloc::raw_vec::RawVec<alloc::vec::Vec<i32>>>@GOTPCREL]
        add     rsp, 24
        ret
        mov     rax, qword ptr [rip + core::panicking::panic_cannot_unwind@GOTPCREL]
        call    rax
        ud2
.LBB3_5:
        mov     rdi, qword ptr [rsp + 8]
        call    _Unwind_Resume@PLT
        ud2

core::ptr::drop_in_place<alloc::raw_vec::RawVec<alloc::vec::Vec<i32>>>:
        push    rax
        call    qword ptr [rip + <alloc::raw_vec::RawVec<T,A> as core::ops::drop::Drop>::drop@GOTPCREL]
        pop     rax
        ret

alloc::vec::Vec<T,A>::len:
        mov     rax, qword ptr [rdi + 16]
        ret

alloc::vec::Vec<T,A>::len:
        mov     rax, qword ptr [rdi + 16]
        ret

alloc::raw_vec::RawVec<T,A>::current_memory:
        mov     qword ptr [rsp - 104], rsi
        mov     qword ptr [rsp - 96], rdi
        mov     qword ptr [rsp - 88], rdi
        xor     eax, eax
        test    al, 1
        jne     .LBB7_2
        mov     rax, qword ptr [rsp - 104]
        cmp     qword ptr [rax + 8], 0
        sete    al
        and     al, 1
        mov     byte ptr [rsp - 73], al
        jmp     .LBB7_3
.LBB7_2:
        mov     byte ptr [rsp - 73], 1
.LBB7_3:
        test    byte ptr [rsp - 73], 1
        jne     .LBB7_5
        mov     rax, qword ptr [rsp - 96]
        mov     rcx, qword ptr [rsp - 104]
        imul    rdx, qword ptr [rcx + 8], 24
        mov     qword ptr [rsp - 64], rdx
        mov     qword ptr [rsp - 72], 8
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rsp - 16], rcx
        mov     rcx, qword ptr [rsp - 16]
        mov     qword ptr [rsp - 8], rcx
        mov     rcx, qword ptr [rsp - 8]
        mov     qword ptr [rsp - 24], rcx
        mov     rcx, qword ptr [rsp - 24]
        mov     qword ptr [rsp - 32], rcx
        mov     rcx, qword ptr [rsp - 32]
        mov     qword ptr [rsp - 56], rcx
        mov     rdx, qword ptr [rsp - 72]
        mov     rcx, qword ptr [rsp - 64]
        mov     qword ptr [rsp - 48], rdx
        mov     qword ptr [rsp - 40], rcx
        mov     rcx, qword ptr [rsp - 56]
        mov     qword ptr [rax], rcx
        mov     rcx, qword ptr [rsp - 48]
        mov     qword ptr [rax + 8], rcx
        mov     rcx, qword ptr [rsp - 40]
        mov     qword ptr [rax + 16], rcx
        jmp     .LBB7_6
.LBB7_5:
        mov     rax, qword ptr [rsp - 96]
        mov     qword ptr [rax + 8], 0
.LBB7_6:
        mov     rax, qword ptr [rsp - 88]
        ret

alloc::raw_vec::RawVec<T,A>::current_memory:
        mov     qword ptr [rsp - 104], rsi
        mov     qword ptr [rsp - 96], rdi
        mov     qword ptr [rsp - 88], rdi
        xor     eax, eax
        test    al, 1
        jne     .LBB8_2
        mov     rax, qword ptr [rsp - 104]
        cmp     qword ptr [rax + 8], 0
        sete    al
        and     al, 1
        mov     byte ptr [rsp - 73], al
        jmp     .LBB8_3
.LBB8_2:
        mov     byte ptr [rsp - 73], 1
.LBB8_3:
        test    byte ptr [rsp - 73], 1
        jne     .LBB8_5
        mov     rax, qword ptr [rsp - 96]
        mov     rcx, qword ptr [rsp - 104]
        mov     rdx, qword ptr [rcx + 8]
        shl     rdx, 2
        mov     qword ptr [rsp - 64], rdx
        mov     qword ptr [rsp - 72], 4
        mov     rcx, qword ptr [rcx]
        mov     qword ptr [rsp - 16], rcx
        mov     rcx, qword ptr [rsp - 16]
        mov     qword ptr [rsp - 8], rcx
        mov     rcx, qword ptr [rsp - 8]
        mov     qword ptr [rsp - 24], rcx
        mov     rcx, qword ptr [rsp - 24]
        mov     qword ptr [rsp - 32], rcx
        mov     rcx, qword ptr [rsp - 32]
        mov     qword ptr [rsp - 56], rcx
        mov     rdx, qword ptr [rsp - 72]
        mov     rcx, qword ptr [rsp - 64]
        mov     qword ptr [rsp - 48], rdx
        mov     qword ptr [rsp - 40], rcx
        mov     rcx, qword ptr [rsp - 56]
        mov     qword ptr [rax], rcx
        mov     rcx, qword ptr [rsp - 48]
        mov     qword ptr [rax + 8], rcx
        mov     rcx, qword ptr [rsp - 40]
        mov     qword ptr [rax + 16], rcx
        jmp     .LBB8_6
.LBB8_5:
        mov     rax, qword ptr [rsp - 96]
        mov     qword ptr [rax + 8], 0
.LBB8_6:
        mov     rax, qword ptr [rsp - 88]
        ret

<alloc::alloc::Global as core::alloc::Allocator>::deallocate:
        sub     rsp, 56
        mov     qword ptr [rsp + 8], rsi
        mov     qword ptr [rsp + 16], rdx
        mov     qword ptr [rsp + 24], rcx
        cmp     qword ptr [rsp + 24], 0
        jne     .LBB9_2
        jmp     .LBB9_3
.LBB9_2:
        mov     rdi, qword ptr [rsp + 8]
        mov     rcx, qword ptr [rsp + 16]
        mov     rax, qword ptr [rsp + 24]
        mov     qword ptr [rsp + 32], rcx
        mov     qword ptr [rsp + 40], rax
        mov     rsi, qword ptr [rsp + 40]
        mov     rax, qword ptr [rsp + 32]
        mov     qword ptr [rsp + 48], rax
        mov     rdx, qword ptr [rsp + 48]
        call    qword ptr [rip + __rust_dealloc@GOTPCREL]
.LBB9_3:
        add     rsp, 56
        ret

<alloc::vec::Vec<T,A> as core::ops::drop::Drop>::drop:
        sub     rsp, 40
        mov     rcx, qword ptr [rdi]
        mov     rax, qword ptr [rdi + 16]
        mov     qword ptr [rsp + 24], rcx
        mov     qword ptr [rsp + 32], rax
        mov     rcx, qword ptr [rsp + 24]
        mov     rax, qword ptr [rsp + 32]
        mov     qword ptr [rsp + 8], rcx
        mov     qword ptr [rsp + 16], rax
        mov     rdi, qword ptr [rsp + 8]
        mov     rsi, qword ptr [rsp + 16]
        call    qword ptr [rip + core::ptr::drop_in_place<[alloc::vec::Vec<i32>]>@GOTPCREL]
        add     rsp, 40
        ret

<alloc::vec::Vec<T,A> as core::ops::drop::Drop>::drop:
        mov     rcx, qword ptr [rdi]
        mov     rax, qword ptr [rdi + 16]
        mov     qword ptr [rsp - 16], rcx
        mov     qword ptr [rsp - 8], rax
        mov     rcx, qword ptr [rsp - 16]
        mov     rax, qword ptr [rsp - 8]
        mov     qword ptr [rsp - 32], rcx
        mov     qword ptr [rsp - 24], rax
        ret

<usize as core::slice::index::SliceIndex<[T]>>::index:
        sub     rsp, 40
        mov     qword ptr [rsp + 8], rdi
        mov     qword ptr [rsp + 16], rsi
        mov     qword ptr [rsp + 24], rdx
        mov     qword ptr [rsp + 32], rcx
        cmp     rdi, rdx
        setb    al
        test    al, 1
        jne     .LBB12_1
        jmp     .LBB12_2
.LBB12_1:
        mov     rax, qword ptr [rsp + 16]
        mov     rcx, qword ptr [rsp + 8]
        imul    rcx, rcx, 24
        add     rax, rcx
        add     rsp, 40
        ret
.LBB12_2:
        mov     rdx, qword ptr [rsp + 32]
        mov     rsi, qword ptr [rsp + 24]
        mov     rdi, qword ptr [rsp + 8]
        mov     rax, qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]
        call    rax
        ud2

<usize as core::slice::index::SliceIndex<[T]>>::index:
        sub     rsp, 40
        mov     qword ptr [rsp + 8], rdi
        mov     qword ptr [rsp + 16], rsi
        mov     qword ptr [rsp + 24], rdx
        mov     qword ptr [rsp + 32], rcx
        cmp     rdi, rdx
        setb    al
        test    al, 1
        jne     .LBB13_1
        jmp     .LBB13_2
.LBB13_1:
        mov     rax, qword ptr [rsp + 16]
        mov     rcx, qword ptr [rsp + 8]
        shl     rcx, 2
        add     rax, rcx
        add     rsp, 40
        ret
.LBB13_2:
        mov     rdx, qword ptr [rsp + 32]
        mov     rsi, qword ptr [rsp + 24]
        mov     rdi, qword ptr [rsp + 8]
        mov     rax, qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]
        call    rax
        ud2

<alloc::raw_vec::RawVec<T,A> as core::ops::drop::Drop>::drop:
        sub     rsp, 40
        mov     rsi, rdi
        mov     qword ptr [rsp + 8], rsi
        lea     rdi, [rsp + 16]
        call    qword ptr [rip + alloc::raw_vec::RawVec<T,A>::current_memory@GOTPCREL]
        mov     eax, 1
        xor     ecx, ecx
        cmp     qword ptr [rsp + 24], 0
        cmove   rax, rcx
        cmp     rax, 1
        jne     .LBB14_2
        mov     rdi, qword ptr [rsp + 8]
        mov     rsi, qword ptr [rsp + 16]
        mov     rdx, qword ptr [rsp + 24]
        mov     rcx, qword ptr [rsp + 32]
        call    <alloc::alloc::Global as core::alloc::Allocator>::deallocate
.LBB14_2:
        add     rsp, 40
        ret

<alloc::raw_vec::RawVec<T,A> as core::ops::drop::Drop>::drop:
        sub     rsp, 40
        mov     rsi, rdi
        mov     qword ptr [rsp + 8], rsi
        lea     rdi, [rsp + 16]
        call    qword ptr [rip + alloc::raw_vec::RawVec<T,A>::current_memory@GOTPCREL]
        mov     eax, 1
        xor     ecx, ecx
        cmp     qword ptr [rsp + 24], 0
        cmove   rax, rcx
        cmp     rax, 1
        jne     .LBB15_2
        mov     rdi, qword ptr [rsp + 8]
        mov     rsi, qword ptr [rsp + 16]
        mov     rdx, qword ptr [rsp + 24]
        mov     rcx, qword ptr [rsp + 32]
        call    <alloc::alloc::Global as core::alloc::Allocator>::deallocate
.LBB15_2:
        add     rsp, 40
        ret

<alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index:
        sub     rsp, 72
        mov     rcx, rdx
        mov     qword ptr [rsp + 8], rsi
        mov     rax, rdi
        mov     rdi, qword ptr [rsp + 8]
        mov     rdx, qword ptr [rax]
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rsp + 40], rdx
        mov     qword ptr [rsp + 48], rax
        mov     rdx, qword ptr [rsp + 40]
        mov     rax, qword ptr [rsp + 48]
        mov     qword ptr [rsp + 24], rdx
        mov     qword ptr [rsp + 32], rax
        mov     rsi, qword ptr [rsp + 24]
        mov     rdx, qword ptr [rsp + 32]
        mov     rax, qword ptr [rip + <usize as core::slice::index::SliceIndex<[T]>>::index@GOTPCREL]
        call    rax
        mov     qword ptr [rsp + 16], rax
        jmp     .LBB16_3
.LBB16_1:
        xor     eax, eax
        test    al, 1
        jne     .LBB16_5
        jmp     .LBB16_4
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rsp + 56], rcx
        mov     dword ptr [rsp + 64], eax
        jmp     .LBB16_1
.LBB16_3:
        mov     rax, qword ptr [rsp + 16]
        add     rsp, 72
        ret
.LBB16_4:
        mov     rdi, qword ptr [rsp + 56]
        call    _Unwind_Resume@PLT
        ud2
.LBB16_5:
        jmp     .LBB16_4

<alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index:
        sub     rsp, 72
        mov     rcx, rdx
        mov     qword ptr [rsp + 8], rsi
        mov     rax, rdi
        mov     rdi, qword ptr [rsp + 8]
        mov     rdx, qword ptr [rax]
        mov     rax, qword ptr [rax + 16]
        mov     qword ptr [rsp + 40], rdx
        mov     qword ptr [rsp + 48], rax
        mov     rdx, qword ptr [rsp + 40]
        mov     rax, qword ptr [rsp + 48]
        mov     qword ptr [rsp + 24], rdx
        mov     qword ptr [rsp + 32], rax
        mov     rsi, qword ptr [rsp + 24]
        mov     rdx, qword ptr [rsp + 32]
        mov     rax, qword ptr [rip + <usize as core::slice::index::SliceIndex<[T]>>::index@GOTPCREL]
        call    rax
        mov     qword ptr [rsp + 16], rax
        jmp     .LBB17_3
.LBB17_1:
        xor     eax, eax
        test    al, 1
        jne     .LBB17_5
        jmp     .LBB17_4
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rsp + 56], rcx
        mov     dword ptr [rsp + 64], eax
        jmp     .LBB17_1
.LBB17_3:
        mov     rax, qword ptr [rsp + 16]
        add     rsp, 72
        ret
.LBB17_4:
        mov     rdi, qword ptr [rsp + 56]
        call    _Unwind_Resume@PLT
        ud2
.LBB17_5:
        jmp     .LBB17_4

example::search_matrix:
        sub     rsp, 152
        mov     qword ptr [rsp + 88], rdi
        mov     dword ptr [rsp + 100], esi
        mov     rax, qword ptr [rip + alloc::vec::Vec<T,A>::len@GOTPCREL]
        call    rax
        mov     qword ptr [rsp + 104], rax
        jmp     .LBB18_3
.LBB18_1:
        mov     rdi, qword ptr [rsp + 88]
        mov     rax, qword ptr [rip + core::ptr::drop_in_place<alloc::vec::Vec<alloc::vec::Vec<i32>>>@GOTPCREL]
        call    rax
        jmp     .LBB18_36
        mov     rcx, rax
        mov     eax, edx
        mov     qword ptr [rsp + 136], rcx
        mov     dword ptr [rsp + 144], eax
        jmp     .LBB18_1
.LBB18_3:
        mov     rdi, qword ptr [rsp + 88]
        lea     rdx, [rip + .Lalloc_6c4df6f635053a8e148c7610eec46186]
        mov     rax, qword ptr [rip + <alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index@GOTPCREL]
        xor     ecx, ecx
        mov     esi, ecx
        call    rax
        mov     qword ptr [rsp + 80], rax
        jmp     .LBB18_4
.LBB18_4:
        mov     rdi, qword ptr [rsp + 80]
        mov     rax, qword ptr [rip + alloc::vec::Vec<T,A>::len@GOTPCREL]
        call    rax
        mov     qword ptr [rsp + 72], rax
        jmp     .LBB18_5
.LBB18_5:
        mov     rcx, qword ptr [rsp + 72]
        mov     rax, qword ptr [rsp + 104]
        mov     qword ptr [rsp + 120], 0
        mul     rcx
        mov     qword ptr [rsp + 64], rax
        seto    al
        test    al, 1
        jne     .LBB18_7
        mov     rax, qword ptr [rsp + 64]
        dec     rax
        mov     qword ptr [rsp + 56], rax
        seto    al
        test    al, 1
        jne     .LBB18_10
        jmp     .LBB18_9
.LBB18_7:
        lea     rdi, [rip + str.0]
        lea     rdx, [rip + .Lalloc_1c9f67c90a9ceee6720830879b04789f]
        mov     rax, qword ptr [rip + core::panicking::panic@GOTPCREL]
        mov     esi, 33
        call    rax
        jmp     .LBB18_8
.LBB18_8:
        ud2
.LBB18_9:
        mov     rax, qword ptr [rsp + 56]
        mov     qword ptr [rsp + 128], rax
        jmp     .LBB18_11
.LBB18_10:
        lea     rdi, [rip + str.1]
        lea     rdx, [rip + .Lalloc_1c9f67c90a9ceee6720830879b04789f]
        mov     rax, qword ptr [rip + core::panicking::panic@GOTPCREL]
        mov     esi, 33
        call    rax
        jmp     .LBB18_8
.LBB18_11:
        mov     rax, qword ptr [rsp + 120]
        cmp     rax, qword ptr [rsp + 128]
        jle     .LBB18_13
        mov     byte ptr [rsp + 119], 0
        jmp     .LBB18_14
.LBB18_13:
        mov     rax, qword ptr [rsp + 120]
        add     rax, qword ptr [rsp + 128]
        mov     qword ptr [rsp + 48], rax
        seto    al
        test    al, 1
        jne     .LBB18_16
        jmp     .LBB18_15
.LBB18_14:
        mov     rdi, qword ptr [rsp + 88]
        call    qword ptr [rip + core::ptr::drop_in_place<alloc::vec::Vec<alloc::vec::Vec<i32>>>@GOTPCREL]
        mov     al, byte ptr [rsp + 119]
        and     al, 1
        movzx   eax, al
        add     rsp, 152
        ret
.LBB18_15:
        jmp     .LBB18_17
.LBB18_16:
        lea     rdi, [rip + str.2]
        lea     rdx, [rip + .Lalloc_08da6c09420dae8cf78e79d91cf3a303]
        mov     rax, qword ptr [rip + core::panicking::panic@GOTPCREL]
        mov     esi, 28
        call    rax
        jmp     .LBB18_8
.LBB18_17:
        mov     rax, qword ptr [rsp + 48]
        movabs  rcx, -9223372036854775808
        cmp     rax, rcx
        sete    al
        and     al, 0
        test    al, 1
        jne     .LBB18_19
        mov     rax, qword ptr [rsp + 48]
        mov     ecx, 2
        cqo
        idiv    rcx
        mov     rcx, rax
        mov     rax, qword ptr [rsp + 72]
        mov     qword ptr [rsp + 40], rcx
        cmp     rax, 0
        sete    al
        test    al, 1
        jne     .LBB18_21
        jmp     .LBB18_20
.LBB18_19:
        lea     rdi, [rip + str.3]
        lea     rdx, [rip + .Lalloc_08da6c09420dae8cf78e79d91cf3a303]
        mov     rax, qword ptr [rip + core::panicking::panic@GOTPCREL]
        mov     esi, 31
        call    rax
        jmp     .LBB18_8
.LBB18_20:
        mov     rdi, qword ptr [rsp + 88]
        mov     rcx, qword ptr [rsp + 72]
        mov     rax, qword ptr [rsp + 40]
        xor     edx, edx
        div     rcx
        mov     rsi, rax
        lea     rdx, [rip + .Lalloc_c065d1073ca1f0855eaaf6a7eda553d1]
        mov     rax, qword ptr [rip + <alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index@GOTPCREL]
        call    rax
        mov     qword ptr [rsp + 32], rax
        jmp     .LBB18_22
.LBB18_21:
        lea     rdi, [rip + str.4]
        lea     rdx, [rip + .Lalloc_fe4655783be5f37fc5c0e3b55b363feb]
        mov     rax, qword ptr [rip + core::panicking::panic@GOTPCREL]
        mov     esi, 25
        call    rax
        jmp     .LBB18_8
.LBB18_22:
        mov     rax, qword ptr [rsp + 72]
        cmp     rax, 0
        sete    al
        test    al, 1
        jne     .LBB18_24
        mov     rdi, qword ptr [rsp + 32]
        mov     rcx, qword ptr [rsp + 72]
        mov     rax, qword ptr [rsp + 40]
        xor     edx, edx
        div     rcx
        mov     rsi, rdx
        lea     rdx, [rip + .Lalloc_c065d1073ca1f0855eaaf6a7eda553d1]
        mov     rax, qword ptr [rip + <alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index@GOTPCREL]
        call    rax
        mov     qword ptr [rsp + 24], rax
        jmp     .LBB18_25
.LBB18_24:
        lea     rdi, [rip + str.5]
        lea     rdx, [rip + .Lalloc_a669913f9f43a4951dd1130efc5ee081]
        mov     rax, qword ptr [rip + core::panicking::panic@GOTPCREL]
        mov     esi, 57
        call    rax
        jmp     .LBB18_8
.LBB18_25:
        mov     ecx, dword ptr [rsp + 100]
        mov     rax, qword ptr [rsp + 24]
        mov     eax, dword ptr [rax]
        mov     dword ptr [rsp + 20], eax
        cmp     eax, ecx
        je      .LBB18_27
        mov     eax, dword ptr [rsp + 20]
        mov     ecx, dword ptr [rsp + 100]
        cmp     eax, ecx
        jl      .LBB18_29
        jmp     .LBB18_28
.LBB18_27:
        mov     byte ptr [rsp + 119], 1
        jmp     .LBB18_14
.LBB18_28:
        mov     eax, dword ptr [rsp + 20]
        mov     ecx, dword ptr [rsp + 100]
        cmp     eax, ecx
        jg      .LBB18_30
        jmp     .LBB18_11
.LBB18_29:
        mov     rax, qword ptr [rsp + 40]
        inc     rax
        mov     qword ptr [rsp + 8], rax
        seto    al
        test    al, 1
        jne     .LBB18_34
        jmp     .LBB18_33
.LBB18_30:
        mov     rax, qword ptr [rsp + 40]
        dec     rax
        mov     qword ptr [rsp], rax
        seto    al
        test    al, 1
        jne     .LBB18_32
        mov     rax, qword ptr [rsp]
        mov     qword ptr [rsp + 128], rax
        jmp     .LBB18_11
.LBB18_32:
        lea     rdi, [rip + str.1]
        lea     rdx, [rip + .Lalloc_5326d854eea99428d1e125a58315c730]
        mov     rax, qword ptr [rip + core::panicking::panic@GOTPCREL]
        mov     esi, 33
        call    rax
        jmp     .LBB18_8
.LBB18_33:
        mov     rax, qword ptr [rsp + 8]
        mov     qword ptr [rsp + 120], rax
        jmp     .LBB18_11
.LBB18_34:
        lea     rdi, [rip + str.2]
        lea     rdx, [rip + .Lalloc_d1f7fe4f62ca96e393c465c048da9174]
        mov     rax, qword ptr [rip + core::panicking::panic@GOTPCREL]
        mov     esi, 28
        call    rax
        jmp     .LBB18_8
        mov     rax, qword ptr [rip + core::panicking::panic_cannot_unwind@GOTPCREL]
        call    rax
        ud2
.LBB18_36:
        mov     rdi, qword ptr [rsp + 136]
        call    _Unwind_Resume@PLT
        ud2

.Lalloc_9be5c135c0f7c91e35e471f025924b11:
        .ascii  "/app/example.rs"

.Lalloc_6c4df6f635053a8e148c7610eec46186:
        .quad   .Lalloc_9be5c135c0f7c91e35e471f025924b11
        .asciz  "\017\000\000\000\000\000\000\000\004\000\000\000\024\000\000"

.Lalloc_1c9f67c90a9ceee6720830879b04789f:
        .quad   .Lalloc_9be5c135c0f7c91e35e471f025924b11
        .asciz  "\017\000\000\000\000\000\000\000\b\000\000\000\034\000\000"

str.0:
        .ascii  "attempt to multiply with overflow"

str.1:
        .ascii  "attempt to subtract with overflow"

.Lalloc_08da6c09420dae8cf78e79d91cf3a303:
        .quad   .Lalloc_9be5c135c0f7c91e35e471f025924b11
        .asciz  "\017\000\000\000\000\000\000\000\013\000\000\000\027\000\000"

str.2:
        .ascii  "attempt to add with overflow"

str.3:
        .ascii  "attempt to divide with overflow"

.Lalloc_fe4655783be5f37fc5c0e3b55b363feb:
        .quad   .Lalloc_9be5c135c0f7c91e35e471f025924b11
        .asciz  "\017\000\000\000\000\000\000\000\r\000\000\000\"\000\000"

str.4:
        .ascii  "attempt to divide by zero"

.Lalloc_c065d1073ca1f0855eaaf6a7eda553d1:
        .quad   .Lalloc_9be5c135c0f7c91e35e471f025924b11
        .asciz  "\017\000\000\000\000\000\000\000\r\000\000\000\033\000\000"

.Lalloc_a669913f9f43a4951dd1130efc5ee081:
        .quad   .Lalloc_9be5c135c0f7c91e35e471f025924b11
        .asciz  "\017\000\000\000\000\000\000\000\r\000\000\000?\000\000"

str.5:
        .ascii  "attempt to calculate the remainder with a divisor of zero"

.Lalloc_5326d854eea99428d1e125a58315c730:
        .quad   .Lalloc_9be5c135c0f7c91e35e471f025924b11
        .asciz  "\017\000\000\000\000\000\000\000\023\000\000\000\025\000\000"

.Lalloc_d1f7fe4f62ca96e393c465c048da9174:
        .quad   .Lalloc_9be5c135c0f7c91e35e471f025924b11
        .asciz  "\017\000\000\000\000\000\000\000\021\000\000\000\024\000\000"

DW.ref.rust_eh_personality:
        .quad   rust_eh_personality